import os

from pathlib import Path

from lambdatrader.utilities.utils import get_project_directory, running_in_docker, seconds


def env(env_var, default, cast_to=None):
    value = os.getenv(env_var, default)
    if cast_to:
        value = cast_to(value)
    return value


def to_bool(obj):
    return True if obj == 'True' or obj is True else False


HOME_DIRECTORY = str(Path.home())

DEFAULT_POLONIEX_API_KEY = '2P9D3B5N-8GU99V86-WBJ5RIR8-XCR9C8E4'
DEFAULT_POLONIEX_API_SECRET = '3cc9d85847d9d1958d66742a8e7847f1087ae2727b' \
                              'f377ff1142c7abdda265f6938d0b15354ba034c79f8d72e252ecd36ebe2bb61977e1645e8d97dc97ecac82'
DEFAULT_TELEGRAM_TOKEN = '333814433:AAFY1TgqLFLT5qG6AXNCwXUE4JXsCq8ueRg'
DEFAULT_TELEGRAM_CHAT_IDS = '348015198,442191588'
DEFAULT_BOT_NAME = 'BOT_TEST'
DEFAULT_PORTFOLIO_NAME = 'PORTFOLIO_TEST'

DEFAULT_ASYNC_FETCH_POLX_CANDLESTICKS = True

DEFAULT_POLX_COACH_TIMEFRAME = 1.0
DEFAULT_POLX_COACH_CALL_LIMIT = 6

DEFAULT_EXECUTOR__NUM_CHUNKS = 10
DEFAULT_EXECUTOR__MIN_CHUNK_SIZE = 0.00011

DEFAULT_RETRACEMENT_SIGNALS__ORDER_TIMEOUT = 1 * 24 * 3600
DEFAULT_RETRACEMENT_SIGNALS__HIGH_VOLUME_LIMIT = 20
DEFAULT_RETRACEMENT_SIGNALS__MIN_NUM_HIGH_VOLUME_PAIRS = 1
DEFAULT_RETRACEMENT_SIGNALS__BUY_PROFIT_FACTOR = 1.03
DEFAULT_RETRACEMENT_SIGNALS__RETRACEMENT_RATIO = 0.1

DEFAULT_DYNAMIC_RETRACEMENT_SIGNALS__LOOKBACK_DAYS = 0.3333333
DEFAULT_DYNAMIC_RETRACEMENT_SIGNALS__LOOKBACK_DRAWDOWN_RATIO = 1

DEFAULT_ENABLE_DISABLE_TRADING = True

DEFAULT_RED_GREEN_MARKET_NUM_PAIRS = 50

DEFAULT_RED_MARKET_MAJORITY_NUM = 19
DEFAULT_RED_MARKET_NUM_CANDLES = 2
DEFAULT_RED_MARKET_DIP_THRESHOLD = 0.01

DEFAULT_GREEN_MARKET_MAJORITY_NUM = 25
DEFAULT_GREEN_MARKET_NUM_CANDLES = 6
DEFAULT_GREEN_MARKET_UP_THRESHOLD = 0.00

DEFAULT_ENABLING_DISABLING_CHECK_INTERVAL = seconds(seconds=30)

DEFAULT_POLONIEX_TRADING_PAIRS = 'BTC_BCN,BTC_BELA,BTC_BLK,BTC_BTCD,BTC_BTM,BTC_BTS,BTC_BURST,BTC_CLAM,BTC_DASH,' \
                                 'BTC_DGB,BTC_DOGE,BTC_EMC2,BTC_FLDC,BTC_FLO,BTC_GAME,BTC_GRC,BTC_HUC,BTC_LTC,' \
                                 'BTC_MAID,BTC_OMNI,BTC_NAUT,BTC_NAV,BTC_NEOS,BTC_NMC,BTC_NOTE,BTC_NXT,BTC_PINK,' \
                                 'BTC_POT,BTC_PPC,BTC_RIC,BTC_SJCX,BTC_STR,BTC_SYS,BTC_VIA,BTC_XVC,BTC_VRC,BTC_VTC,' \
                                 'BTC_XBC,BTC_XCP,BTC_XEM,BTC_XMR,BTC_XPM,BTC_XRP,BTC_ETH,BTC_SC,BTC_BCY,BTC_EXP,' \
                                 'BTC_FCT,BTC_RADS,BTC_AMP,BTC_DCR,BTC_LSK,BTC_LBC,BTC_STEEM,BTC_SBD,BTC_ETC,BTC_REP,' \
                                 'BTC_ARDR,BTC_ZEC,BTC_STRAT,BTC_NXC,BTC_PASC,BTC_GNT,BTC_GNO,BTC_BCH'

DEFAULT_POLONIEX_TAKER_FEE = 0.0025
DEFAULT_POLONIEX_MAKER_FEE = 0.0015

DEFAULT_BACKTESTING_TAKER_FEE = DEFAULT_POLONIEX_TAKER_FEE
DEFAULT_BACKTESTING_MAKER_FEE = DEFAULT_POLONIEX_MAKER_FEE

DEFAULT_TELEGRAM_ENABLED = False

DEFAULT_MONGODB_URI = 'mongodb://mongodb:27017/'

DEFAULT_DEBUG_TO_CONSOLE = False

DEFAULT_BACKTESTING_NUM_DAYS = 7
DEFAULT_BACKTESTING_END_OFFSET_DAYS = 0

DEFAULT_LAMBDATRADER_HOME = os.path.join(HOME_DIRECTORY, '.lambdatrader')

POLONIEX_API_KEY = env('POLONIEX_API_KEY', DEFAULT_POLONIEX_API_KEY)
POLONIEX_API_SECRET = env('POLONIEX_API_SECRET', DEFAULT_POLONIEX_API_SECRET)

TELEGRAM_TOKEN = env('TELEGRAM_TOKEN', DEFAULT_TELEGRAM_TOKEN)

TELEGRAM_CHAT_IDS = list(env('TELEGRAM_CHAT_IDS', DEFAULT_TELEGRAM_CHAT_IDS).split(','))

BOT_NAME = env('BOT_NAME', DEFAULT_BOT_NAME)
PORTFOLIO_NAME = env('PORTFOLIO_NAME', DEFAULT_PORTFOLIO_NAME)

BOT_IDENTIFIER = '{}:{}'.format(BOT_NAME, PORTFOLIO_NAME)

ASYNC_FETCH_POLX_CANDLESTICKS = env('ASYNC_FETCH_POLX_CANDLESTICKS', DEFAULT_ASYNC_FETCH_POLX_CANDLESTICKS, to_bool)

POLX_COACH_TIMEFRAME = env('POLX_COACH_TIMEFRAME', DEFAULT_POLX_COACH_TIMEFRAME, float)
POLX_COACH_CALL_LIMIT = env('POLX_COACH_CALL_LIMIT', DEFAULT_POLX_COACH_CALL_LIMIT, int)

EXECUTOR__NUM_CHUNKS = env('EXECUTOR__NUM_CHUNKS', DEFAULT_EXECUTOR__NUM_CHUNKS, float)
EXECUTOR__MIN_CHUNK_SIZE = env('EXECUTOR__MIN_CHUNK_SIZE', DEFAULT_EXECUTOR__NUM_CHUNKS, float)

RETRACEMENT_SIGNALS__ORDER_TIMEOUT = \
    env('RETRACEMENT_SIGNALS__ORDER_TIMEOUT', DEFAULT_RETRACEMENT_SIGNALS__ORDER_TIMEOUT, int)
RETRACEMENT_SIGNALS__HIGH_VOLUME_LIMIT = \
    env('RETRACEMENT_SIGNALS__HIGH_VOLUME_LIMIT', DEFAULT_RETRACEMENT_SIGNALS__HIGH_VOLUME_LIMIT, float)
RETRACEMENT_SIGNALS__MIN_NUM_HIGH_VOLUME_PAIRS = \
    env('RETRACEMENT_SIGNALS__MIN_NUM_HIGH_VOLUME_PAIRS', DEFAULT_RETRACEMENT_SIGNALS__MIN_NUM_HIGH_VOLUME_PAIRS, int)
RETRACEMENT_SIGNALS__BUY_PROFIT_FACTOR = \
    env('RETRACEMENT_SIGNALS__BUY_PROFIT_FACTOR', DEFAULT_RETRACEMENT_SIGNALS__BUY_PROFIT_FACTOR, float)
RETRACEMENT_SIGNALS__RETRACEMENT_RATIO = \
    env('RETRACEMENT_SIGNALS__RETRACEMENT_RATIO', DEFAULT_RETRACEMENT_SIGNALS__RETRACEMENT_RATIO, float)

DYNAMIC_RETRACEMENT_SIGNALS__LOOKBACK_DAYS = \
    env('DYNAMIC_RETRACEMENT_SIGNALS__LOOKBACK_DAYS', DEFAULT_DYNAMIC_RETRACEMENT_SIGNALS__LOOKBACK_DAYS, float)
DYNAMIC_RETRACEMENT_SIGNALS__LOOKBACK_DRAWDOWN_RATIO = \
    env('DYNAMIC_RETRACEMENT_SIGNALS__LOOKBACK_DRAWDOWN_RATIO', DEFAULT_DYNAMIC_RETRACEMENT_SIGNALS__LOOKBACK_DRAWDOWN_RATIO, float)

ENABLE_DISABLE_TRADING = env('ENABLE_DISABLE_TRADING', DEFAULT_ENABLE_DISABLE_TRADING, to_bool)

RED_GREEN_MARKET_NUM_PAIRS = env('RED_GREEN_MARKET_NUM_PAIRS', DEFAULT_RED_GREEN_MARKET_NUM_PAIRS, int)

RED_MARKET_MAJORITY_NUM = env('RED_MARKET_MAJORITY_NUM', DEFAULT_RED_MARKET_MAJORITY_NUM, int)
RED_MARKET_NUM_CANDLES = env('RED_MARKET_NUM_CANDLES', DEFAULT_RED_MARKET_NUM_CANDLES, int)
RED_MARKET_DIP_THRESHOLD = env('RED_MARKET_DIP_THRESHOLD', DEFAULT_RED_MARKET_DIP_THRESHOLD, float)

GREEN_MARKET_MAJORITY_NUM = env('GREEN_MARKET_MAJORITY_NUM', DEFAULT_GREEN_MARKET_MAJORITY_NUM, int)
GREEN_MARKET_NUM_CANDLES = env('GREEN_MARKET_NUM_CANDLES', DEFAULT_GREEN_MARKET_NUM_CANDLES, int)
GREEN_MARKET_UP_THRESHOLD = env('GREEN_MARKET_UP_THRESHOLD', DEFAULT_GREEN_MARKET_UP_THRESHOLD, float)

ENABLING_DISABLING_CHECK_INTERVAL = env('ENABLING_DISABLING_CHECK_INTERVAL', DEFAULT_ENABLING_DISABLING_CHECK_INTERVAL, int)

POLONIEX_TRADING_PAIRS = list(env('POLONIEX_TRADING_PAIRS', DEFAULT_POLONIEX_TRADING_PAIRS).split(','))

POLONIEX_TAKER_FEE = env('POLONIEX_TAKER_FEE', DEFAULT_POLONIEX_TAKER_FEE, float)
POLONIEX_MAKER_FEE = env('POLONIEX_MAKER_FEE', DEFAULT_POLONIEX_MAKER_FEE, float)

BACKTESTING_TAKER_FEE = env('BACKTESTING_TAKER_FEE', DEFAULT_BACKTESTING_TAKER_FEE, float)
BACKTESTING_MAKER_FEE = env('BACKTESTING_MAKER_FEE', DEFAULT_BACKTESTING_MAKER_FEE, float)

TELEGRAM_ENABLED = env('TELEGRAM_ENABLED', DEFAULT_TELEGRAM_ENABLED, to_bool)

MONGODB_URI = env('MONGODB_URI', DEFAULT_MONGODB_URI)

DEBUG_TO_CONSOLE = env('DEBUG_TO_CONSOLE', DEFAULT_DEBUG_TO_CONSOLE, to_bool)

BACKTESTING_NUM_DAYS = env('BACKTESTING_NUM_DAYS', DEFAULT_BACKTESTING_NUM_DAYS, float)
BACKTESTING_END_OFFSET_DAYS = env('BACKTESTING_END_OFFSET_DAYS', DEFAULT_BACKTESTING_END_OFFSET_DAYS, float)

LAMBDATRADER_HOME = env('LAMBDATRADER_HOME', DEFAULT_LAMBDATRADER_HOME)

DATA_DIRECTORY = os.path.join(LAMBDATRADER_HOME, 'data')
CANDLESTICK_DB_DIRECTORY = os.path.join(DATA_DIRECTORY, 'candlesticks')

BOT_DIRECTORY = os.path.join(LAMBDATRADER_HOME, BOT_IDENTIFIER)
BOT_LOG_DIRECTORY = os.path.join(BOT_DIRECTORY, 'log')
